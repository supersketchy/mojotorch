import math


# Task 0.1 in mojo
fn mul(x: Float64, y: Float64) -> Float64:
    """Multiplies two floats together.

    Args:
        x: The first Float64 to multiply.
        y: The second Float64 to multiply.

    Returns:
        Float64 result of x * y.
    """
    return x * y


fn id(x: Float64) -> Float64:
    """Identifies the value of x.

    Args:
        x: The Float64 to identify.

    Returns:
        Float64 of x.
    """
    return x


fn eq(x: Float64, y: Float64) -> Float64:
    """Determines which value is greater between x and y. Prefer using is_close, as the floats may be inaccurate.

    Args:
        x: The first Float64 to compare.
        y: The second Float64 to compare.

    Returns:
        1.0 if x and y are equal, and 0.0 if they are not.
    """
    if x == y:
        return 1.0
    return 0.0


fn neg(x: Float64) -> Float64:
    """Returns the negation of x.

    Args:
        x: The Float64 to negate.

    Returns:
        The negation of x.
    """
    return -1 * x


fn add(x: Float64, y: Float64) -> Float64:
    """Adds two floats together.

    Args:
        x: The first Float64 to add.
        y: The second Float64 to add.

    Returns:
        Float64 result of x + y.
    """
    return x + y


fn max(x: Float64, y: Float64) -> Float64:
    """Returns the greater number between x and y.

    Args:
        x: The first Float64 to compare.
        y: The second Float64 to compare.

    Returns:
        Float64 of the greater number. If x = y, then y is returned.
    """
    if x > y:
        return x
    return y


fn lt(x: Float64, y: Float64) -> Float64:
    """Returns 1.0 if x is less than y, else return 0.0.

    Args:
        x: The first Float64 to compare.
        y: The second Float64 to compare.

    Returns:
        A Float64 representing if x is less than y.
    """
    if x == y:
        return 1.0
    return 0.0
